import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion";
import Head from "next/head";
import { useEffect, useState } from "react";

type Lesson = {
  _id: string;
  lessonTitle: string;
  isComplete: boolean;
};

type Chapter = {
  _id: string;
  chapter: string;
  chapterOrder: number;
  lessons: Lesson[];
};

type ChaptersData = Chapter[];

export default function Home() {
  const [chapters, setChapters] = useState<ChaptersData>([]);
  const [stats, setStats] = useState({ total: 0, completed: 0 });

  const fetchData = async () => {
    try {
      const res = await fetch("/api/chapter/get");
      const data = (await res.json()) as { data: ChaptersData };

      setChapters(data.data);

      let total = 0;
      let completed = 0;
      data.data.forEach(({ lessons }) => {
        lessons.forEach(({ isComplete }) => {
          if (isComplete) completed++;
          total++;
        });
      });

      setStats({ total, completed });
    } catch (error) {
      console.error(error);
    }
  };

  useEffect(() => {
    fetchData();
  }, []);

  const updateIsLessonComplete = (
    checked: boolean,
    chapterID: string,
    lessonID: string
  ) => {
    setChapters((prev) => {
      let tempPrev = [...prev];
      tempPrev.forEach(({ lessons, _id }) => {
        if (_id === chapterID) {
          lessons.forEach((lesson) => {
            if (lesson._id === lessonID) {
              lesson.isComplete = checked;
            }
          });
        }
      });

      return [...tempPrev];
    });
  };

  const handleCheck = async (
    checked: boolean,
    chapterID: string,
    lessonID: string
  ) => {
    try {
      // Optimistic UI update
      updateIsLessonComplete(checked, chapterID, lessonID);

      await fetch("/api/chapter/update", {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          chapterID,
          lessonID,
          isComplete: checked,
        }),
      });

      fetchData();
    } catch (error) {
      console.error(error);
    }
  };

  let index = 0;

  return (
    <div>
      <Head>
        <title>Progress Tracker</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="p-6 flex">
        <div className="w-[60%]">
          <Accordion type="single" collapsible className="w-full">
            {chapters.map(
              ({ chapter, chapterOrder, lessons, _id: chapterID }) => (
                <AccordionItem key={chapterID} value={chapterID}>
                  <AccordionTrigger>
                    {chapterOrder}. {chapter}
                  </AccordionTrigger>
                  <AccordionContent>
                    {lessons.map(
                      ({ lessonTitle, isComplete, _id: lessonID }) => (
                        <div
                          key={lessonID}
                          className="flex w-fit grow-0 gap-2 ml-6 py-1 transition px-2 rounded-lg items-center hover:bg-slate-200"
                        >
                          <div className="flex items-center h-5">
                            <input
                              id="helper-checkbox"
                              aria-describedby="helper-checkbox-text"
                              type="checkbox"
                              checked={isComplete}
                              onChange={(
                                e: React.ChangeEvent<HTMLInputElement>
                              ) =>
                                handleCheck(
                                  e.target.checked,
                                  chapterID,
                                  lessonID
                                )
                              }
                              className="w-4 h-4 cursor-pointer accent-slate-900  bg-slate-900 text-slate-900  border-gray-300"
                            />
                          </div>
                          <h4
                            className={`text-base text-slate-800 ${
                              isComplete
                                ? "line-through decoration-slate-500"
                                : ""
                            }`}
                          >
                            {++index}. {lessonTitle}
                          </h4>
                        </div>
                      )
                    )}
                  </AccordionContent>
                </AccordionItem>
              )
            )}
          </Accordion>
        </div>
        <aside className="w-[30%] fixed top-6 right-6 border-2 border-slate-200 rounded-2xl p-6">
          <div className="flex justify-around">
            <div className="bg-slate-100 rounded-lg text-slate-700 w-28 h-28 flex gap-2 justify-center items-center">
              <h1 className="text-4xl">
                {stats.completed > 0
                  ? ((stats.completed / stats.total) * 100).toFixed(1)
                  : "0"}
              </h1>
              <span className="mt-3">%</span>
            </div>
            <div className="bg-slate-100 rounded-lg text-slate-700 w-28 h-28 flex flex-col gap-2 justify-center items-center">
              <h1 className="text-4xl">{stats.total}</h1>
              <p className="text-lg">Total</p>
            </div>
            <div className="bg-slate-100 rounded-lg text-slate-700 w-28 h-28 flex flex-col gap-2 justify-center items-center">
              <h1 className="text-4xl">{stats.completed}</h1>
              <p className="text-lg">Completed</p>
            </div>
          </div>
        </aside>
      </main>
    </div>
  );
}
